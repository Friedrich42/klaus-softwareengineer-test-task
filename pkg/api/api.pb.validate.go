// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/api.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CategoryScoresRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoryScoresRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryScoresRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryScoresRequestMultiError, or nil if none found.
func (m *CategoryScoresRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryScoresRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTimePeriod() == nil {
		err := CategoryScoresRequestValidationError{
			field:  "TimePeriod",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTimePeriod()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CategoryScoresRequestValidationError{
					field:  "TimePeriod",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CategoryScoresRequestValidationError{
					field:  "TimePeriod",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimePeriod()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CategoryScoresRequestValidationError{
				field:  "TimePeriod",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CategoryScoresRequestMultiError(errors)
	}

	return nil
}

// CategoryScoresRequestMultiError is an error wrapping multiple validation
// errors returned by CategoryScoresRequest.ValidateAll() if the designated
// constraints aren't met.
type CategoryScoresRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryScoresRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryScoresRequestMultiError) AllErrors() []error { return m }

// CategoryScoresRequestValidationError is the validation error returned by
// CategoryScoresRequest.Validate if the designated constraints aren't met.
type CategoryScoresRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryScoresRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryScoresRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryScoresRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryScoresRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryScoresRequestValidationError) ErrorName() string {
	return "CategoryScoresRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryScoresRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryScoresRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryScoresRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryScoresRequestValidationError{}

// Validate checks the field values on Scores with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Scores) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Scores with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ScoresMultiError, or nil if none found.
func (m *Scores) ValidateAll() error {
	return m.validate(true)
}

func (m *Scores) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScoresValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScoresValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScoresValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Score

	if len(errors) > 0 {
		return ScoresMultiError(errors)
	}

	return nil
}

// ScoresMultiError is an error wrapping multiple validation errors returned by
// Scores.ValidateAll() if the designated constraints aren't met.
type ScoresMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScoresMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScoresMultiError) AllErrors() []error { return m }

// ScoresValidationError is the validation error returned by Scores.Validate if
// the designated constraints aren't met.
type ScoresValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScoresValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScoresValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScoresValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScoresValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScoresValidationError) ErrorName() string { return "ScoresValidationError" }

// Error satisfies the builtin error interface
func (e ScoresValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScores.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScoresValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScoresValidationError{}

// Validate checks the field values on CategoryScoresResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoryScoresResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryScoresResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryScoresResponseMultiError, or nil if none found.
func (m *CategoryScoresResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryScoresResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetScores() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CategoryScoresResponseValidationError{
						field:  fmt.Sprintf("Scores[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CategoryScoresResponseValidationError{
						field:  fmt.Sprintf("Scores[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CategoryScoresResponseValidationError{
					field:  fmt.Sprintf("Scores[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CategoryScoresResponseMultiError(errors)
	}

	return nil
}

// CategoryScoresResponseMultiError is an error wrapping multiple validation
// errors returned by CategoryScoresResponse.ValidateAll() if the designated
// constraints aren't met.
type CategoryScoresResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryScoresResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryScoresResponseMultiError) AllErrors() []error { return m }

// CategoryScoresResponseValidationError is the validation error returned by
// CategoryScoresResponse.Validate if the designated constraints aren't met.
type CategoryScoresResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryScoresResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryScoresResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryScoresResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryScoresResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryScoresResponseValidationError) ErrorName() string {
	return "CategoryScoresResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryScoresResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryScoresResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryScoresResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryScoresResponseValidationError{}

// Validate checks the field values on TicketScoresRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TicketScoresRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TicketScoresRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TicketScoresRequestMultiError, or nil if none found.
func (m *TicketScoresRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TicketScoresRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTimePeriod() == nil {
		err := TicketScoresRequestValidationError{
			field:  "TimePeriod",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTimePeriod()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TicketScoresRequestValidationError{
					field:  "TimePeriod",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TicketScoresRequestValidationError{
					field:  "TimePeriod",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimePeriod()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TicketScoresRequestValidationError{
				field:  "TimePeriod",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TicketScoresRequestMultiError(errors)
	}

	return nil
}

// TicketScoresRequestMultiError is an error wrapping multiple validation
// errors returned by TicketScoresRequest.ValidateAll() if the designated
// constraints aren't met.
type TicketScoresRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TicketScoresRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TicketScoresRequestMultiError) AllErrors() []error { return m }

// TicketScoresRequestValidationError is the validation error returned by
// TicketScoresRequest.Validate if the designated constraints aren't met.
type TicketScoresRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketScoresRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketScoresRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketScoresRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketScoresRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketScoresRequestValidationError) ErrorName() string {
	return "TicketScoresRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TicketScoresRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicketScoresRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketScoresRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketScoresRequestValidationError{}

// Validate checks the field values on TicketScoresResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TicketScoresResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TicketScoresResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TicketScoresResponseMultiError, or nil if none found.
func (m *TicketScoresResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TicketScoresResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetScores() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TicketScoresResponseValidationError{
						field:  fmt.Sprintf("Scores[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TicketScoresResponseValidationError{
						field:  fmt.Sprintf("Scores[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TicketScoresResponseValidationError{
					field:  fmt.Sprintf("Scores[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TicketScoresResponseMultiError(errors)
	}

	return nil
}

// TicketScoresResponseMultiError is an error wrapping multiple validation
// errors returned by TicketScoresResponse.ValidateAll() if the designated
// constraints aren't met.
type TicketScoresResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TicketScoresResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TicketScoresResponseMultiError) AllErrors() []error { return m }

// TicketScoresResponseValidationError is the validation error returned by
// TicketScoresResponse.Validate if the designated constraints aren't met.
type TicketScoresResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketScoresResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketScoresResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketScoresResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketScoresResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketScoresResponseValidationError) ErrorName() string {
	return "TicketScoresResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TicketScoresResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicketScoresResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketScoresResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketScoresResponseValidationError{}

// Validate checks the field values on QualityScoreRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QualityScoreRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QualityScoreRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QualityScoreRequestMultiError, or nil if none found.
func (m *QualityScoreRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QualityScoreRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTimePeriod() == nil {
		err := QualityScoreRequestValidationError{
			field:  "TimePeriod",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTimePeriod()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QualityScoreRequestValidationError{
					field:  "TimePeriod",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QualityScoreRequestValidationError{
					field:  "TimePeriod",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimePeriod()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QualityScoreRequestValidationError{
				field:  "TimePeriod",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QualityScoreRequestMultiError(errors)
	}

	return nil
}

// QualityScoreRequestMultiError is an error wrapping multiple validation
// errors returned by QualityScoreRequest.ValidateAll() if the designated
// constraints aren't met.
type QualityScoreRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QualityScoreRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QualityScoreRequestMultiError) AllErrors() []error { return m }

// QualityScoreRequestValidationError is the validation error returned by
// QualityScoreRequest.Validate if the designated constraints aren't met.
type QualityScoreRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QualityScoreRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QualityScoreRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QualityScoreRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QualityScoreRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QualityScoreRequestValidationError) ErrorName() string {
	return "QualityScoreRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QualityScoreRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQualityScoreRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QualityScoreRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QualityScoreRequestValidationError{}

// Validate checks the field values on QualityScoreResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QualityScoreResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QualityScoreResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QualityScoreResponseMultiError, or nil if none found.
func (m *QualityScoreResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QualityScoreResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Score

	if len(errors) > 0 {
		return QualityScoreResponseMultiError(errors)
	}

	return nil
}

// QualityScoreResponseMultiError is an error wrapping multiple validation
// errors returned by QualityScoreResponse.ValidateAll() if the designated
// constraints aren't met.
type QualityScoreResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QualityScoreResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QualityScoreResponseMultiError) AllErrors() []error { return m }

// QualityScoreResponseValidationError is the validation error returned by
// QualityScoreResponse.Validate if the designated constraints aren't met.
type QualityScoreResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QualityScoreResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QualityScoreResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QualityScoreResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QualityScoreResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QualityScoreResponseValidationError) ErrorName() string {
	return "QualityScoreResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QualityScoreResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQualityScoreResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QualityScoreResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QualityScoreResponseValidationError{}

// Validate checks the field values on ScoreChangeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ScoreChangeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScoreChangeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScoreChangeRequestMultiError, or nil if none found.
func (m *ScoreChangeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ScoreChangeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetFirstTimePeriod() == nil {
		err := ScoreChangeRequestValidationError{
			field:  "FirstTimePeriod",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetFirstTimePeriod()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScoreChangeRequestValidationError{
					field:  "FirstTimePeriod",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScoreChangeRequestValidationError{
					field:  "FirstTimePeriod",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFirstTimePeriod()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScoreChangeRequestValidationError{
				field:  "FirstTimePeriod",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSecondTimePeriod() == nil {
		err := ScoreChangeRequestValidationError{
			field:  "SecondTimePeriod",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSecondTimePeriod()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScoreChangeRequestValidationError{
					field:  "SecondTimePeriod",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScoreChangeRequestValidationError{
					field:  "SecondTimePeriod",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecondTimePeriod()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScoreChangeRequestValidationError{
				field:  "SecondTimePeriod",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ScoreChangeRequestMultiError(errors)
	}

	return nil
}

// ScoreChangeRequestMultiError is an error wrapping multiple validation errors
// returned by ScoreChangeRequest.ValidateAll() if the designated constraints
// aren't met.
type ScoreChangeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScoreChangeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScoreChangeRequestMultiError) AllErrors() []error { return m }

// ScoreChangeRequestValidationError is the validation error returned by
// ScoreChangeRequest.Validate if the designated constraints aren't met.
type ScoreChangeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScoreChangeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScoreChangeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScoreChangeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScoreChangeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScoreChangeRequestValidationError) ErrorName() string {
	return "ScoreChangeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ScoreChangeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScoreChangeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScoreChangeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScoreChangeRequestValidationError{}

// Validate checks the field values on ScoreChangeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ScoreChangeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScoreChangeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScoreChangeResponseMultiError, or nil if none found.
func (m *ScoreChangeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ScoreChangeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Score

	if len(errors) > 0 {
		return ScoreChangeResponseMultiError(errors)
	}

	return nil
}

// ScoreChangeResponseMultiError is an error wrapping multiple validation
// errors returned by ScoreChangeResponse.ValidateAll() if the designated
// constraints aren't met.
type ScoreChangeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScoreChangeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScoreChangeResponseMultiError) AllErrors() []error { return m }

// ScoreChangeResponseValidationError is the validation error returned by
// ScoreChangeResponse.Validate if the designated constraints aren't met.
type ScoreChangeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScoreChangeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScoreChangeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScoreChangeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScoreChangeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScoreChangeResponseValidationError) ErrorName() string {
	return "ScoreChangeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ScoreChangeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScoreChangeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScoreChangeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScoreChangeResponseValidationError{}

// Validate checks the field values on TimePeriod with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TimePeriod) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimePeriod with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TimePeriodMultiError, or
// nil if none found.
func (m *TimePeriod) ValidateAll() error {
	return m.validate(true)
}

func (m *TimePeriod) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStart()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TimePeriodValidationError{
					field:  "Start",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TimePeriodValidationError{
					field:  "Start",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimePeriodValidationError{
				field:  "Start",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEnd()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TimePeriodValidationError{
					field:  "End",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TimePeriodValidationError{
					field:  "End",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEnd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimePeriodValidationError{
				field:  "End",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TimePeriodMultiError(errors)
	}

	return nil
}

// TimePeriodMultiError is an error wrapping multiple validation errors
// returned by TimePeriod.ValidateAll() if the designated constraints aren't met.
type TimePeriodMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimePeriodMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimePeriodMultiError) AllErrors() []error { return m }

// TimePeriodValidationError is the validation error returned by
// TimePeriod.Validate if the designated constraints aren't met.
type TimePeriodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimePeriodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimePeriodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimePeriodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimePeriodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimePeriodValidationError) ErrorName() string { return "TimePeriodValidationError" }

// Error satisfies the builtin error interface
func (e TimePeriodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimePeriod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimePeriodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimePeriodValidationError{}
